// .papi/descriptors/src/wndAssethub_metadata.ts
var binMeta = "";
var wndAssethub_metadata_default = binMeta;
export {
  wndAssethub_metadata_default as default
};
